CREATE TABLE "users" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(50) NOT NULL,
  "email" varchar(50) NOT NULL,
  "password" varchar(20) NOT NULL,
  "age" int NOT NULL,
  "roles_id" int NOT NULL
);

CREATE TABLE "students_courses" (
  "student" int NOT NULL,
  "courses_id" int NOT NULL
);

CREATE TABLE "courses" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "title" varchar(50) NOT NULL,
  "description" varchar(200) NOT NULL,
  "teacher" int NOT NULL,
  "category_id" int NOT NULL,
  "course_video_id" int NOT NULL
);

CREATE TABLE "levels" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(30) NOT NULL
);

CREATE TABLE "courses_levels" (
  "course_id" int NOT NULL,
  "level_id" int NOT NULL
);

CREATE TABLE "course_video" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "title" varchar(50) NOT NULL,
  "url" varchar(200) NOT NULL
);

CREATE TABLE "categories" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(50) NOT NULL
);

CREATE TABLE "roles" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(50) NOT NULL
);

ALTER TABLE "students_courses" ADD FOREIGN KEY ("student") REFERENCES "users" ("id");

ALTER TABLE "students_courses" ADD FOREIGN KEY ("courses_id") REFERENCES "courses" ("id");

ALTER TABLE "courses" ADD FOREIGN KEY ("teacher") REFERENCES "users" ("id");

ALTER TABLE "users" ADD FOREIGN KEY ("roles_id") REFERENCES "roles" ("id");

ALTER TABLE "courses_levels" ADD FOREIGN KEY ("course_id") REFERENCES "courses" ("id");

ALTER TABLE "courses_levels" ADD FOREIGN KEY ("level_id") REFERENCES "levels" ("id");

ALTER TABLE "courses" ADD FOREIGN KEY ("course_video_id") REFERENCES "course_video" ("id");

ALTER TABLE "courses" ADD FOREIGN KEY ("category_id") REFERENCES "categories" ("id");


// comamndos para la creacion de tablas

// COURSE_VIDEO

coursedb=# INSERT INTO course_video (title, url) VALUES ('introduccion a javascript','www.courses.com/desarrollo/javascript'), 
('EL DOM','www.courses.com/desarrollo/dom'), 
('partes de la guitarra','www.courses.com/musica/guitarra/partes de la guitarra');
INSERT 0 3

// USERS

coursedb=# INSERT INTO users (name, email, password, age, roles_id) VALUES ('bruno leon', 'bruno@gmail.com','bruno123', 30, 2);
INSERT 0 1
coursedb=# INSERT INTO users (name, email, password, age, roles_id) VALUES ('marcelo calderon', 'marcelo@gmail.com','marcelo123', 20,1);
INSERT 0 1
coursedb=# INSERT INTO users (name, email, password, age, roles_id) VALUES ('raul prado', 'raul@gmail.com','raul123', 45, 2);
INSERT 0 1
coursedb=# INSERT INTO users (name, email, password, age, roles_id) VALUES ('tatiana la chira', 'tatiana@gmail.com','tatiana123', 28, 1);
INSERT 0 1
coursedb=# INSERT INTO users (name, email, password, age, roles_id) VALUES ('jorge bustillos', 'jorge@gmail.com', 'jorge123',35,2);
INSERT 0 1

// COURSES

coursedb=# INSERT INTO courses (title, description, teacher, category_id, course_video_id) VALUES ('javascript', 'lenguaje de programacion usado desde el lado del cliente',1 , 1 , 1);
INSERT 0 1
coursedb=# INSERT INTO courses (title, description, teacher, category_id, course_video_id) VALUES ('react js', 'libreria de javascript',1 , 1 , 1);
INSERT 0 1
coursedb=# INSERT INTO courses (title, description, teacher, category_id, course_video_id) VALUES ('guitarra clasica', 'instrumento de cuerda',5 , 2 , 3);
INSERT 0 1

// STUDENTS_COURSES

coursedb=# INSERT INTO students_courses ( student, courses_id) VALUES (2, 2), (4,3), (2, 4);
INSERT 0 3

// COURSES_LEVELS

coursedb=# INSERT INTO courses_levels (course_id, level_id) VALUES (2, 1), (3, 2);
INSERT 0 2

// LEVELS

coursedb=# INSERT INTO levels ( name ) VALUES ('basico'), ('intermedio'), ('avanzado');
INSERT 0 3

// CATEGORIES

coursedb=# INSERT INTO categories( name ) VALUES ('desarrollo'), ('musica');
INSERT 0 2

// ROLES

coursedb=# INSERT INTO roles ( name ) VALUES ('student'), ('teacher'), ('admin');
INSERT 0 3


//CONSULTA DE ESTUDIANTES

coursedb=# SELECT users.name, email, age, roles.name, title, description, categories.name  FROM users JOIN roles on users.roles_id = roles.id JOIN students_courses ON users.id = students_courses.student JOIN courses ON students_courses.courses_id = courses.id JOIN categories ON courses.category_id = categories.id   WHERE roles.name = 'student';